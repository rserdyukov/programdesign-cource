@startuml base

class Приложение <<main, injector>> {
    + {static} main()
    # build(): РекомендацияКино
}
Приложение ..> РекомендацияКино: <<create>>
Приложение ..> Фильм: <<create>>
Приложение ..> Актер: <<create>>


class РекомендацияКино {
    + run()
    + показатьЭкранПриветствия()
    + показатьЭкранПервичногоОпроса()
    + показатьЭкранВыбораАктера()
    + показатьЭкранРекомендации()
    + показатьЭкранОпросаПросмотренногоРекомендованногоФильма()

    # on_выбранПользователь(имяПользователя: string)
    # on_выбранаОбщаяОценкаФильма(названиеФильма: string, оценка: int)
    # on_выбранаОценкаАктераГлавнойРолиФильма(названиеФильма: string, имяАктер: string, оценка: int)
    # on_выбранАктер(имяАктер: string)
    # on_выбранФильм(названиеФильма: string)

    # подобратьРекомендации()
}
РекомендацияКино "1" -> "n, +пользователиСистемы" Пользователь
РекомендацияКино "1" -> "n, +оценкиФильма" ОценкаФильмаПользователем
РекомендацияКино "1" -> "n, +оценкиАктера" ОценкаАктераПользователем

class Пользователь {
    имя: string
}
Пользователь "1" --> "0..1, +рекомендованныйФильм" Фильм

class Фильм {
    + название: string
}
Фильм "1" --> "n, +актерыГлавныхРолей" Актер
Фильм "1" --> "n, +остальныеАктеры" Актер

class Актер {
    + имя: string
}

class ОценкаФильмаПользователем {
    + оценка: int
}

ОценкаФильмаПользователем "n" --> "1, +фильм" Фильм
ОценкаФильмаПользователем "n" --> "1, +пользователь" Пользователь

class ОценкаАктераПользователем {
    + оценка: int
}
ОценкаАктераПользователем "n" --> "1, +актер" Актер
ОценкаАктераПользователем "n" --> "1, +фильм" Фильм
ОценкаАктераПользователем "n" --> "1, +пользователь" Пользователь




@enduml

' Система позволяет получить персональные рекомендации по кинопроизведениям на основе оценки просмотренных фильмов. 
' Пользователь начиная работать с системой представляется ей. 
' Если это первый запуск системы, то вначале ему предлагается выбрать три последних кинопроизведения которые он посмотрел и для каждого отвечает на вопросы: общая оценка и оценки актерам главных ролей. 
' Дальше он выбирает актера, кинопроизведение с участием которого он хочет посмотреть. 
' Система подбирает кинопроизведение исходя из максимальной интегрированной оценки полученной суммой оценок каждого пользователя, которая вычисляется как перемножение оценки роли актера и общей оценки за фильм. 
' После того пользователь выбрал кинопроизведение для просмотра, система это запоминает и при следующем входе пользователя просит его оценить просмотренный фильм. 
' Процедура оценки такая же как и для первого входа. Оценки разных пользователей хранятся вместе.