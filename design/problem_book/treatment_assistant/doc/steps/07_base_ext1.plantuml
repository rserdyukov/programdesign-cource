@startuml base
skinparam classAttributeIconSize 0


class Приложение <<main, injector>> {
    + {static} main()
    # build() : ПомощникПоЛечению
}
note top
В системе может быть еще один тип ответа - несколько из многих вариантов
end note
Приложение ..> ПомощникПоЛечению : <<create>>

class Болезнь {
}
Болезнь "1" --> "10, +диагностика" Вопрос
ПомощникПоЛечению "1" --> "n, +известныеБолезни" Болезнь

class Вопрос {
    + формулировка: string
    + отобразить()
}
ПомощникПоЛечению "1" --> "10, +опрос" Вопрос

class Ответ {
    + сравнить(другойОтвет: Ответ): boolean
}
Вопрос "1" --> "0..1, +ответ" Ответ

class ОтветНесколькоИзМногих {
    + значение: list[string]
    + сравнить(другойОтвет: Ответ): boolean
    + сравнить(другойОтвет: ОтветНесколькоИзМногих): boolean
}
ОтветНесколькоИзМногих --|> Ответ


class ОтветЧисловой {
    + значение: int
    + сравнить(другойОтвет: Ответ): boolean
    + сравнить(другойОтвет: ОтветЧисловой): boolean
}
ОтветЧисловой --|> Ответ
class ОтветОдинИзМногих {
    + значение: string
    + сравнить(другойОтвет: Ответ): boolean
    + сравнить(другойОтвет: ОтветОдинИзМногих): boolean
}
ОтветОдинИзМногих --|> Ответ

class ВопросЧисловой {
    + on_введеноЗначение(значение: int)
    + отобразить()
}
ВопросЧисловой --|> Вопрос
ВопросЧисловой ..> ОтветЧисловой: <<create>>

class ВопросОдинИзМногих {
    - формулировкаВариантов: list[string]
    + on_введеноЗначение(значение: string)
    + отобразить()
}
ВопросОдинИзМногих --|> Вопрос
ВопросОдинИзМногих ..> ОтветОдинИзМногих: <<create>>

class ВопросНесколькоИзМногих {
    - формулировкаВариантов: list[string]
    + on_введеноЗначение(значение: list[string])
    + отобразить()
}
ВопросНесколькоИзМногих --|> Вопрос
ВопросНесколькоИзМногих ..> ОтветНесколькоИзМногих: <<create>>
Приложение ..> ВопросНесколькоИзМногих: <<create>>


class Приложение #aliceblue
class ОтветНесколькоИзМногих #aliceblue
class ВопросНесколькоИзМногих #aliceblue

class Ответ #Yellow
class ОтветЧисловой #Yellow
class ОтветОдинИзМногих #Yellow

@enduml