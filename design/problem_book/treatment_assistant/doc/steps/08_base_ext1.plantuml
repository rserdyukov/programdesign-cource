@startuml base
skinparam classAttributeIconSize 0


class Приложение <<main, injector>> {
    + {static} main()
    # build() : ПомощникПоЛечению
}

Приложение ..> ПомощникПоЛечению : <<create>>

class ПомощникПоЛечению {
    + run()

    + on_ВыбранПрофиль(имя_профиля: string)
    + on_ВыбранОтветНаВопрос(вопрос_id: string, ответ: string)
    + on_ЗавершенОпрос()
    + on_ВыранаПодходящаяБолезнь()
    + on_ДобавленоЛекарство(название: string, количество: int)

    # показатьОкноВыбораПрофилей()
    # показатьОкноБлижайшийПриемЛекарств()
    # показатьОкноОпроса()
    # показатьОкноСпискаПодходящихБолезней()
    # показатьОкноКурсЛечения()
    # показатьОкноДобавленияЛекарства()
}
ПомощникПоЛечению "1" --> "n, #профили" Профиль


class Профиль {
    + имя: string

    + save()
    + load()
}

Профиль "1" --> "0..1, +активныйКурсЛечения" КурсЛечения


class КурсЛечения {

}

class ПриемЛекарства {
    + когда: time
    + сколько: int
}
КурсЛечения "1" --> "n, +списокПриемов" ПриемЛекарства

class Лекарство {
    + название: string
}
ПриемЛекарства "n" --> "1, +лекарство" Лекарство
ПомощникПоЛечению "1" --> "n, +имеющиесяЛекарства" Лекарство

class Болезнь {
    + название
}
Болезнь "1" --> "1, +курсЛечения" КурсЛечения
Болезнь "1" --> "10, +диагностика" Вопрос
ПомощникПоЛечению "1" --> "n, +известныеБолезни" Болезнь

class Вопрос {
    + формулировка: string
    + отобразить()
}
ПомощникПоЛечению "1" --> "10, +опрос" Вопрос


class Ответ {
    + сравнить(другойОтвет: Ответ): boolean
}
Вопрос "1" --> "0..1, +ответ" Ответ


class ОтветЧисловой {
    + значение: int
    + сравнить(другойОтвет: Ответ): boolean
    + сравнить(другойОтвет: ОтветЧисловой): boolean
}
ОтветЧисловой --|> Ответ
class ОтветОдинИзМногих {
    + значение: string
    + сравнить(другойОтвет: Ответ): boolean
    + сравнить(другойОтвет: ОтветОдинИзМногих): boolean
}
ОтветОдинИзМногих --|> Ответ

class ВопросЧисловой {
    + on_введеноЗначение(значение: int)
    + отобразить()
}
ВопросЧисловой --|> Вопрос
ВопросЧисловой ..> ОтветЧисловой: <<create>>

class ВопросОдинИзМногих {
    - формулировкаВариантов: list[string]
    + on_введеноЗначение(значение: string)
    + отобразить()
}
ВопросОдинИзМногих --|> Вопрос
ВопросОдинИзМногих ..> ОтветОдинИзМногих: <<create>>

Приложение ..> ВопросОдинИзМногих: <<create>>
Приложение ..> ВопросЧисловой: <<create>>


@enduml