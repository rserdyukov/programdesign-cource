code: |
export module A; // declares the primary module interface unit for named module 'A'

// hello() will be visible by translations units importing 'A'
export char const *hello() {
  return "hello";
}

// world() will NOT be visible.
char const *world() {
  return "world";
}

// Both one() and zero() will be visible.
export
{
int one() {
  return 1;
}
int zero() {
  return 0;
}
}

// Exporting namespaces also works: hi::english() and hi::french() will be visible.
export
namespace hi {
char const *english() {
  return "Hi!";
}
char const *french() {
  return "Salut!";
}
}
tag:
  - module
  - Exporting module declarations and definitions
---
code: |
export module A;   // declares the primary module interface unit for named module 'A'
module A;          // declares a module implementation unit for named module 'A'
module A;          // declares another module implementation unit for named module 'A'
export module A.B; // declares the primary module interface unit for named module 'A.B'
module A.B;        // declares a module implementation unit for named module 'A.B'
tag:
  - module
  - module declarations
---
code: |
/////// A.cpp (primary module interface unit of 'A')
export module A;

export char const *hello() { return "hello"; }

/////// B.cpp (primary module interface unit of 'B')
export module B;

export import A;

export char const *world() { return "world"; }

/////// main.cpp (not a module unit)
#include <iostream>
import B;

int main() {
  std::cout << hello() << ' ' << world() << '\n';
}
tag:
  - module
  - Importing modules and headers/import modules
---
code: |
/////// A.cpp (primary module interface unit of 'A')
export module A;

import <iostream>;
export import <string_view>;

export void print(std::string_view message) {
  std::cout << message << std::endl;
}

/////// main.cpp (not a module unit)
import A;

int main() {
  std::string_view message = "Hello, world!";
  print(message);
}
tag: 
  - module
  - Importing modules and headers/import modules
  - Importing modules and headers/import headers
---
code: |
module;

#define _POSIX_C_SOURCE 200809L
#include <stdlib.h>

export module A;

import <ctime>;

// Only for demonstration (bad source of randomness).
// Use C++ <random> instead.
export double weak_random() {
  std::timespec ts;
  std::timespec_get(&ts, TIME_UTC); // from <ctime>

  // Provided in <stdlib.h> according to the POSIX standard.
  srand48(ts.tv_nsec);

  // drand48() returns a random number between 0 and 1.
  return drand48();
}

// main.cpp (not a module unit)
import<iostream>;
import A;
int main(){
 std::cout<< weak_random() << '\n';
}
tag:
  - module
  - global module fragment
---
code: |
export module foo;
 
export int f();
 
module : private; // ends the portion of the module interface unit that
                  // can affect the behavior of other translation units
                  // starts a private module fragment
 
int f()           // definition not reachable from importers of foo
{
    return 42;
}
tag:
  - module
  - private module fragment
---
code: |
///////  A.cpp   
export module A;     // primary module interface unit

export import :B;    // Hello() is visible when importing 'A'.
import :C;           // WorldImpl() is now visible only for 'A.cpp'.
// export import :C; // ERROR: Cannot export a module implementation unit.

// World() is visible by any translation unit importing 'A'.
export char const *World() {
  return WorldImpl();
}
/////// A-B.cpp 
export module A:B; // partition module interface unit

// Hello() is visible by any translation unit importing 'A'.
export char const *Hello() { 
  return "Hello";
}
/////// A-C.cpp 
module A:C; // partition module implementation unit

// WorldImpl() is visible by any module unit of 'A' importing ':C'.
char const *WorldImpl() {
  return "World";
}
/////// main.cpp 
import A;
import <iostream>;

int main()
{
  std::cout << Hello() << ' ' << World() << '\n';
  // WorldImpl(); // ERROR: WorldImpl() is not visible.
}
tag:
 - module
 - Module partitions

---
code: |
export module lib_A;

int f() {
  return 0;
} // f has module linkage
export int x = f();   // x equals 0
tag:
 - module
 - Exporting module declarations and definitions
 - Module ownership